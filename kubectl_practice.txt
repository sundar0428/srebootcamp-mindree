#9a Get deployments, pods, svc, hpa, namespaces

        # Get commands with basic output
        kubectl get services                          # List all services in the namespace
        kubectl get pods --all-namespaces             # List all pods in all namespaces
        kubectl get pods -o wide                      # List all pods in the current namespace, with more details
        kubectl get deployment my-dep                 # List a particular deployment
        kubectl get pods                              # List all pods in the namespace
        kubectl get pod my-pod -o yaml                # Get a pod's YAML

        # List Services Sorted by Name
        kubectl get services --sort-by=.metadata.name

        #deployments
        kubectl get deployments
        kubectl logs deploy/my-deployment                         # dump Pod logs for a Deployment (single-container case)
        kubectl logs deploy/my-deployment -c my-container         # dump Pod logs for a Deployment (multi-container case)

        kubectl port-forward svc/my-service 5000                  # listen on local port 5000 and forward to port 5000 on Service backend
        kubectl port-forward svc/my-service 5000:my-service-port  # listen on local port 5000 and forward to Service target port with name <my-service-port>

        kubectl port-forward deploy/my-deployment 5000:6000       # listen on local port 5000 and forward to port 6000 on a Pod created by <my-deployment>
        kubectl exec deploy/my-deployment -- ls                   # run command in first Pod and first container in Deployment (single- or multi-container cases)

        #namespaces
        kubectl get namespaces
        #Appending --all-namespaces happens frequently enough where you should be aware of the shorthand for --all-namespaces:
        kubectl get pods --all-namespaces/kubectl get pods -a
        
#9b Explore Jsonpath
        #List all containerIDs of initContainer of all pods
        # Helpful when cleaning up stopped containers, while avoiding removal of initContainers.
        kubectl get pods --all-namespaces -o jsonpath='{range .items[*].status.initContainerStatuses[*]}{.containerID}{"\n"}{end}' | cut -d/ -f3

        # Produce ENV for all pods, assuming you have a default container for the pods, default namespace and the `env` command is supported.
        # Helpful when running any supported command across all pods, not just `env`
        for pod in $(kubectl get po --output=jsonpath={.items..metadata.name}); do echo $pod && kubectl exec -it $pod -- env; done

        # Get the version label of all pods with label app=cassandra
        kubectl get pods --selector=app=cassandra -o \
        jsonpath='{.items[*].metadata.labels.version}'

        # Get ExternalIPs of all nodes
        kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'


#9c Explore --custom-columns

        # All images running in a cluster
        kubectl get pods -A -o=custom-columns='DATA:spec.containers[*].image'

        # All images running in namespace: default, grouped by Pod
        kubectl get pods --namespace default --output=custom-columns="NAME:.metadata.name,IMAGE:.spec.containers[*].image"

        # All images excluding "k8s.gcr.io/coredns:1.6.2"
        kubectl get pods -A -o=custom-columns='DATA:spec.containers[?(@.image!="k8s.gcr.io/coredns:1.6.2")].image'

        # All fields under metadata regardless of name
        kubectl get pods -A -o=custom-columns='DATA:metadata.*'